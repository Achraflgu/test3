-- Create table for customers
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_name VARCHAR(100),
    customer_email VARCHAR(100) UNIQUE,
    customer_password VARCHAR(100),
    customer_address VARCHAR(255),
    customer_city VARCHAR(100),
    customer_postal_code VARCHAR(20),
    customer_country VARCHAR(100),
    customer_phone VARCHAR(20),
    customer_ip_address VARCHAR(45)
);

-- Table for admins
CREATE TABLE Admins (
    admin_id INT PRIMARY KEY AUTO_INCREMENT,
    admin_name VARCHAR(100),
    admin_photo BLOB,
    admin_email VARCHAR(100) UNIQUE,
    admin_password VARCHAR(100),
    admin_job VARCHAR(100),
    admin_phone VARCHAR(20)

);

CREATE TABLE ProductCategories (
    pcategory_id INT PRIMARY KEY AUTO_INCREMENT,
    pcategory_name VARCHAR(100) UNIQUE,
    pcategory_photo BLOB 
);

-- Create table for products
CREATE TABLE Products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    category_id INT,
    product_name VARCHAR(100),
    product_description TEXT,
    product_price INT,
    product_stock_quantity INT,
    FOREIGN KEY (category_id) REFERENCES ProductCategories(pcategory_id)
);


CREATE TABLE Brands (
    brand_id INT PRIMARY KEY AUTO_INCREMENT,
    brand_name VARCHAR(100) UNIQUE,
    brand_photo BLOB
);

CREATE TABLE ShoppingCart (
    cart_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Create table for orders
CREATE TABLE Orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date DATETIME,
    total_amount DECIMAL(10, 2),
    payment_status ENUM('Pending', 'Paid', 'Failed'),
    invoice_no VARCHAR(50) UNIQUE,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Create table for order items (line items)
CREATE TABLE OrderItems (
    order_item_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Payments table
CREATE TABLE Payments (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    payment_date DATETIME,
    amount DECIMAL(10, 2),
    payment_method VARCHAR(50),
    transaction_id VARCHAR(100),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

-- Coupons table
CREATE TABLE Coupons (
    coupon_id INT PRIMARY KEY AUTO_INCREMENT,
    coupon_name VARCHAR(100),
    coupon_code VARCHAR(50) UNIQUE,
    discount DECIMAL(5, 2),
    expiry_date DATE,
    limit_usage INT, -- Added field to limit the usage of coupons
    usage_count INT DEFAULT 0 -- Added field to track the usage count of coupons
);

CREATE TABLE Reviews (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    customer_id INT,
    rating INT,
    review_text TEXT,
    review_date DATETIME,
    FOREIGN KEY (product_id) REFERENCES Products(product_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);
